using System;
using System.Collections.Generic;
using System.Text;

namespace RegexBuilder
{
    public partial struct Escapes
    {
        /// <summary>
        /// Unicode Categories
        /// </summary>
        public static class Unicode
        {

            public static Escapes UnicodeChar(ushort unicode)
            {
                return new Escapes(@"\u" + Convert.ToString(unicode, 16).PadLeft(4, '0'));
            }

            public static Escapes UnicodeChar(char c)
                => new Escapes(@"\u" + Convert.ToString(c, 16).PadLeft(4, '0'));

            public static Escapes UnicodeCategory(Categories Categories)
                  => new Escapes(@"\p{" + Patterns.Unicode.UniCategories[(int)Categories] + "}");

            public static Escapes NegativeUnicodeCategory(Categories Categories)
                 => new Escapes(@"\P{" + Patterns.Unicode.UniCategories[(int)Categories] + "}");

            public static Escapes UppercaseLetter => new Escapes(@"\p{Lu}");
            public static Escapes LowercaseLetter => new Escapes(@"\p{Ll}");
            public static Escapes TitlecaseLetter => new Escapes(@"\p{Lt}");
            public static Escapes ModifierLetter => new Escapes(@"\p{Lm}");
            public static Escapes OtherLetter => new Escapes(@"\p{Lo}");
            public static Escapes Letter => new Escapes(@"\p{L}");
            public static Escapes NonspacingMark => new Escapes(@"\p{Mn}");
            public static Escapes SpacingCombiningMark => new Escapes(@"\p{Mc}");
            public static Escapes EnclosingMark => new Escapes(@"\p{Me}");
            public static Escapes Mark => new Escapes(@"\p{M}");
            public static Escapes DecimalDigitNumber => new Escapes(@"\p{Nd}");
            public static Escapes LetterNumber => new Escapes(@"\p{Nl}");
            public static Escapes OtherNumber => new Escapes(@"\p{No}");
            public static Escapes Number => new Escapes(@"\p{N}");
            public static Escapes ConnectorPunctuation => new Escapes(@"\p{Pc}");
            public static Escapes DashPunctuation => new Escapes(@"\p{Pd}");
            public static Escapes OpenPunctuation => new Escapes(@"\p{Ps}");
            public static Escapes ClosePunctuation => new Escapes(@"\p{Pe}");
            public static Escapes InitialquotePunctuation => new Escapes(@"\p{Pi}");
            public static Escapes FinalquotePunctuation => new Escapes(@"\p{Pf}");
            public static Escapes OtherPunctuation => new Escapes(@"\p{Po}");
            public static Escapes Punctuation => new Escapes(@"\p{P}");
            public static Escapes MathSymbol => new Escapes(@"\p{Sm}");
            public static Escapes CurrencySymbol => new Escapes(@"\p{Sc}");
            public static Escapes ModifierSymbol => new Escapes(@"\p{Sk}");
            public static Escapes OtherSymbol => new Escapes(@"\p{So}");
            public static Escapes Symbol => new Escapes(@"\p{S}");
            public static Escapes SpaceSeparator => new Escapes(@"\p{Zs}");
            public static Escapes LineSeparator => new Escapes(@"\p{Zl}");
            public static Escapes ParagraphSeparator => new Escapes(@"\p{Zp}");
            public static Escapes Separator => new Escapes(@"\p{Z}");
            public static Escapes Format => new Escapes(@"\p{Cf}");
            public static Escapes Surrogate => new Escapes(@"\p{Cs}");
            public static Escapes PrivateUse => new Escapes(@"\p{Co}");
            public static Escapes NotAssigned => new Escapes(@"\p{Cn}");
            public static Escapes OtherControl => new Escapes(@"\p{Cc}");
            public static Escapes Control => new Escapes(@"\p{C}");

            public static Escapes BasicLatin => new Escapes(@"\p{IsBasicLatin}");
            public static Escapes Latin_1Supplement => new Escapes(@"\p{IsLatin-1Supplement}");
            public static Escapes LatinExtended_A => new Escapes(@"\p{IsLatinExtended-A}");
            public static Escapes LatinExtended_B => new Escapes(@"\p{IsLatinExtended-B}");
            public static Escapes IPAExtensions => new Escapes(@"\p{IsIPAExtensions}");
            public static Escapes SpacingModifierLetters => new Escapes(@"\p{IsSpacingModifierLetters}");
            public static Escapes CombiningDiacriticalMarks => new Escapes(@"\p{IsCombiningDiacriticalMarks}");
            public static Escapes Greek => new Escapes(@"\p{IsGreek}");
            public static Escapes GreekandCoptic => new Escapes(@"\p{IsGreekandCoptic}");
            public static Escapes Cyrillic => new Escapes(@"\p{IsCyrillic}");
            public static Escapes CyrillicSupplement => new Escapes(@"\p{IsCyrillicSupplement}");
            public static Escapes Armenian => new Escapes(@"\p{IsArmenian}");
            public static Escapes Hebrew => new Escapes(@"\p{IsHebrew}");
            public static Escapes Arabic => new Escapes(@"\p{IsArabic}");
            public static Escapes Syriac => new Escapes(@"\p{IsSyriac}");
            public static Escapes Thaana => new Escapes(@"\p{IsThaana}");
            public static Escapes Devanagari => new Escapes(@"\p{IsDevanagari}");
            public static Escapes Bengali => new Escapes(@"\p{IsBengali}");
            public static Escapes Gurmukhi => new Escapes(@"\p{IsGurmukhi}");
            public static Escapes Gujarati => new Escapes(@"\p{IsGujarati}");
            public static Escapes Oriya => new Escapes(@"\p{IsOriya}");
            public static Escapes Tamil => new Escapes(@"\p{IsTamil}");
            public static Escapes Telugu => new Escapes(@"\p{IsTelugu}");
            public static Escapes Kannada => new Escapes(@"\p{IsKannada}");
            public static Escapes Malayalam => new Escapes(@"\p{IsMalayalam}");
            public static Escapes Sinhala => new Escapes(@"\p{IsSinhala}");
            public static Escapes Thai => new Escapes(@"\p{IsThai}");
            public static Escapes Lao => new Escapes(@"\p{IsLao}");
            public static Escapes Tibetan => new Escapes(@"\p{IsTibetan}");
            public static Escapes Myanmar => new Escapes(@"\p{IsMyanmar}");
            public static Escapes Georgian => new Escapes(@"\p{IsGeorgian}");
            public static Escapes HangulJamo => new Escapes(@"\p{IsHangulJamo}");
            public static Escapes Ethiopic => new Escapes(@"\p{IsEthiopic}");
            public static Escapes Cherokee => new Escapes(@"\p{IsCherokee}");
            public static Escapes UnifiedCanadianAboriginalSyllabics => new Escapes(@"\p{IsUnifiedCanadianAboriginalSyllabics}");
            public static Escapes Ogham => new Escapes(@"\p{IsOgham}");
            public static Escapes Runic => new Escapes(@"\p{IsRunic}");
            public static Escapes Tagalog => new Escapes(@"\p{IsTagalog}");
            public static Escapes Hanunoo => new Escapes(@"\p{IsHanunoo}");
            public static Escapes Buhid => new Escapes(@"\p{IsBuhid}");
            public static Escapes Tagbanwa => new Escapes(@"\p{IsTagbanwa}");
            public static Escapes Khmer => new Escapes(@"\p{IsKhmer}");
            public static Escapes Mongolian => new Escapes(@"\p{IsMongolian}");
            public static Escapes Limbu => new Escapes(@"\p{IsLimbu}");
            public static Escapes TaiLe => new Escapes(@"\p{IsTaiLe}");
            public static Escapes KhmerSymbols => new Escapes(@"\p{IsKhmerSymbols}");
            public static Escapes PhoneticExtensions => new Escapes(@"\p{IsPhoneticExtensions}");
            public static Escapes LatinExtendedAdditional => new Escapes(@"\p{IsLatinExtendedAdditional}");
            public static Escapes GreekExtended => new Escapes(@"\p{IsGreekExtended}");
            public static Escapes GeneralPunctuation => new Escapes(@"\p{IsGeneralPunctuation}");
            public static Escapes SuperscriptsandSubscripts => new Escapes(@"\p{IsSuperscriptsandSubscripts}");
            public static Escapes CurrencySymbols => new Escapes(@"\p{IsCurrencySymbols}");
            public static Escapes CombiningDiacriticalMarksforSymbols => new Escapes(@"\p{IsCombiningDiacriticalMarksforSymbols}");
            public static Escapes CombiningMarksforSymbols => new Escapes(@"\p{IsCombiningMarksforSymbols}");
            public static Escapes LetterlikeSymbols => new Escapes(@"\p{IsLetterlikeSymbols}");
            public static Escapes NumberForms => new Escapes(@"\p{IsNumberForms}");
            public static Escapes Arrows => new Escapes(@"\p{IsArrows}");
            public static Escapes MathematicalOperators => new Escapes(@"\p{IsMathematicalOperators}");
            public static Escapes MiscellaneousTechnical => new Escapes(@"\p{IsMiscellaneousTechnical}");
            public static Escapes ControlPictures => new Escapes(@"\p{IsControlPictures}");
            public static Escapes OpticalCharacterRecognition => new Escapes(@"\p{IsOpticalCharacterRecognition}");
            public static Escapes EnclosedAlphanumerics => new Escapes(@"\p{IsEnclosedAlphanumerics}");
            public static Escapes BoxDrawing => new Escapes(@"\p{IsBoxDrawing}");
            public static Escapes BlockElements => new Escapes(@"\p{IsBlockElements}");
            public static Escapes GeometricShapes => new Escapes(@"\p{IsGeometricShapes}");
            public static Escapes MiscellaneousSymbols => new Escapes(@"\p{IsMiscellaneousSymbols}");
            public static Escapes Dingbats => new Escapes(@"\p{IsDingbats}");
            public static Escapes MiscellaneousMathematicalSymbols_A => new Escapes(@"\p{IsMiscellaneousMathematicalSymbols-A}");
            public static Escapes SupplementalArrows_A => new Escapes(@"\p{IsSupplementalArrows-A}");
            public static Escapes BraillePatterns => new Escapes(@"\p{IsBraillePatterns}");
            public static Escapes SupplementalArrows_B => new Escapes(@"\p{IsSupplementalArrows-B}");
            public static Escapes MiscellaneousMathematicalSymbols_B => new Escapes(@"\p{IsMiscellaneousMathematicalSymbols-B}");
            public static Escapes SupplementalMathematicalOperators => new Escapes(@"\p{IsSupplementalMathematicalOperators}");
            public static Escapes MiscellaneousSymbolsandArrows => new Escapes(@"\p{IsMiscellaneousSymbolsandArrows}");
            public static Escapes CJKRadicalsSupplement => new Escapes(@"\p{IsCJKRadicalsSupplement}");
            public static Escapes KangxiRadicals => new Escapes(@"\p{IsKangxiRadicals}");
            public static Escapes IdeographicDescriptionCharacters => new Escapes(@"\p{IsIdeographicDescriptionCharacters}");
            public static Escapes CJKSymbolsandPunctuation => new Escapes(@"\p{IsCJKSymbolsandPunctuation}");
            public static Escapes Hiragana => new Escapes(@"\p{IsHiragana}");
            public static Escapes Katakana => new Escapes(@"\p{IsKatakana}");
            public static Escapes Bopomofo => new Escapes(@"\p{IsBopomofo}");
            public static Escapes HangulCompatibilityJamo => new Escapes(@"\p{IsHangulCompatibilityJamo}");
            public static Escapes Kanbun => new Escapes(@"\p{IsKanbun}");
            public static Escapes BopomofoExtended => new Escapes(@"\p{IsBopomofoExtended}");
            public static Escapes KatakanaPhoneticExtensions => new Escapes(@"\p{IsKatakanaPhoneticExtensions}");
            public static Escapes EnclosedCJKLettersandMonths => new Escapes(@"\p{IsEnclosedCJKLettersandMonths}");
            public static Escapes CJKCompatibility => new Escapes(@"\p{IsCJKCompatibility}");
            public static Escapes CJKUnifiedIdeographsExtensionA => new Escapes(@"\p{IsCJKUnifiedIdeographsExtensionA}");
            public static Escapes YijingHexagramSymbols => new Escapes(@"\p{IsYijingHexagramSymbols}");
            public static Escapes CJKUnifiedIdeographs => new Escapes(@"\p{IsCJKUnifiedIdeographs}");
            public static Escapes YiSyllables => new Escapes(@"\p{IsYiSyllables}");
            public static Escapes YiRadicals => new Escapes(@"\p{IsYiRadicals}");
            public static Escapes HangulSyllables => new Escapes(@"\p{IsHangulSyllables}");
            public static Escapes HighSurrogates => new Escapes(@"\p{IsHighSurrogates}");
            public static Escapes HighPrivateUseSurrogates => new Escapes(@"\p{IsHighPrivateUseSurrogates}");
            public static Escapes LowSurrogates => new Escapes(@"\p{IsLowSurrogates}");
            public static Escapes PrivateUseArea => new Escapes(@"\p{IsPrivateUseArea}");
            public static Escapes CJKCompatibilityIdeographs => new Escapes(@"\p{IsCJKCompatibilityIdeographs}");
            public static Escapes LettericPresentationForms => new Escapes(@"\p{IsLettericPresentationForms}");
            public static Escapes ArabicPresentationForms_A => new Escapes(@"\p{IsArabicPresentationForms-A}");
            public static Escapes VariationSelectors => new Escapes(@"\p{IsVariationSelectors}");
            public static Escapes CombiningHalfMarks => new Escapes(@"\p{IsCombiningHalfMarks}");
            public static Escapes CJKCompatibilityForms => new Escapes(@"\p{IsCJKCompatibilityForms}");
            public static Escapes SmallFormVariants => new Escapes(@"\p{IsSmallFormVariants}");
            public static Escapes ArabicPresentationForms_B => new Escapes(@"\p{IsArabicPresentationForms-B}");
            public static Escapes HalfwidthandFullwidthForms => new Escapes(@"\p{IsHalfwidthandFullwidthForms}");
            public static Escapes Specials => new Escapes(@"\p{IsSpecials}");

            public static Escapes NonUppercaseLetter => new Escapes(@"\P{Lu}");
            public static Escapes NonLowercaseLetter => new Escapes(@"\P{Ll}");
            public static Escapes NonTitlecaseLetter => new Escapes(@"\P{Lt}");
            public static Escapes NonModifierLetter => new Escapes(@"\P{Lm}");
            public static Escapes NonOtherLetter => new Escapes(@"\P{Lo}");
            public static Escapes NonLetter => new Escapes(@"\P{L}");
            public static Escapes SpacingMark => new Escapes(@"\P{Mn}");
            public static Escapes NonSpacingCombiningMark => new Escapes(@"\P{Mc}");
            public static Escapes NonEnclosingMark => new Escapes(@"\P{Me}");
            public static Escapes NonMark => new Escapes(@"\P{M}");
            public static Escapes NonDecimalDigitNumber => new Escapes(@"\P{Nd}");
            public static Escapes NonLetterNumber => new Escapes(@"\P{Nl}");
            public static Escapes NonOtherNumber => new Escapes(@"\P{No}");
            public static Escapes NonNumber => new Escapes(@"\P{N}");
            public static Escapes NonConnectorPunctuation => new Escapes(@"\P{Pc}");
            public static Escapes NonDashPunctuation => new Escapes(@"\P{Pd}");
            public static Escapes NonOpenPunctuation => new Escapes(@"\P{Ps}");
            public static Escapes NonClosePunctuation => new Escapes(@"\P{Pe}");
            public static Escapes NonInitialquotePunctuation => new Escapes(@"\P{Pi}");
            public static Escapes NonFinalquotePunctuation => new Escapes(@"\P{Pf}");
            public static Escapes NonOtherPunctuation => new Escapes(@"\P{Po}");
            public static Escapes NonPunctuation => new Escapes(@"\P{P}");
            public static Escapes NonMathSymbol => new Escapes(@"\P{Sm}");
            public static Escapes NonCurrencySymbol => new Escapes(@"\P{Sc}");
            public static Escapes NonModifierSymbol => new Escapes(@"\P{Sk}");
            public static Escapes NonOtherSymbol => new Escapes(@"\P{So}");
            public static Escapes NonSymbol => new Escapes(@"\P{S}");
            public static Escapes NonSpaceSeparator => new Escapes(@"\P{Zs}");
            public static Escapes NonLineSeparator => new Escapes(@"\P{Zl}");
            public static Escapes NonParagraphSeparator => new Escapes(@"\P{Zp}");
            public static Escapes NonSeparator => new Escapes(@"\P{Z}");
            public static Escapes NonFormat => new Escapes(@"\P{Cf}");
            public static Escapes NonSurrogate => new Escapes(@"\P{Cs}");
            public static Escapes NonPrivateUse => new Escapes(@"\P{Co}");
            public static Escapes Assigned => new Escapes(@"\P{Cn}");
            public static Escapes NonOtherControl => new Escapes(@"\P{Cc}");
            public static Escapes NonControl => new Escapes(@"\P{C}");

            public static Escapes NonBasicLatin => new Escapes(@"\P{IsBasicLatin}");
            public static Escapes NonLatin_1Supplement => new Escapes(@"\P{IsLatin-1Supplement}");
            public static Escapes NonLatinExtended_A => new Escapes(@"\P{IsLatinExtended-A}");
            public static Escapes NonLatinExtended_B => new Escapes(@"\P{IsLatinExtended-B}");
            public static Escapes NonIPAExtensions => new Escapes(@"\P{IsIPAExtensions}");
            public static Escapes NonSpacingModifierLetters => new Escapes(@"\P{IsSpacingModifierLetters}");
            public static Escapes NonCombiningDiacriticalMarks => new Escapes(@"\P{IsCombiningDiacriticalMarks}");
            public static Escapes NonGreek => new Escapes(@"\P{IsGreek}");
            public static Escapes NonGreekandCoptic => new Escapes(@"\P{IsGreekandCoptic}");
            public static Escapes NonCyrillic => new Escapes(@"\P{IsCyrillic}");
            public static Escapes NonCyrillicSupplement => new Escapes(@"\P{IsCyrillicSupplement}");
            public static Escapes NonArmenian => new Escapes(@"\P{IsArmenian}");
            public static Escapes NonHebrew => new Escapes(@"\P{IsHebrew}");
            public static Escapes NonArabic => new Escapes(@"\P{IsArabic}");
            public static Escapes NonSyriac => new Escapes(@"\P{IsSyriac}");
            public static Escapes NonThaana => new Escapes(@"\P{IsThaana}");
            public static Escapes NonDevanagari => new Escapes(@"\P{IsDevanagari}");
            public static Escapes NonBengali => new Escapes(@"\P{IsBengali}");
            public static Escapes NonGurmukhi => new Escapes(@"\P{IsGurmukhi}");
            public static Escapes NonGujarati => new Escapes(@"\P{IsGujarati}");
            public static Escapes NonOriya => new Escapes(@"\P{IsOriya}");
            public static Escapes NonTamil => new Escapes(@"\P{IsTamil}");
            public static Escapes NonTelugu => new Escapes(@"\P{IsTelugu}");
            public static Escapes NonKannada => new Escapes(@"\P{IsKannada}");
            public static Escapes NonMalayalam => new Escapes(@"\P{IsMalayalam}");
            public static Escapes NonSinhala => new Escapes(@"\P{IsSinhala}");
            public static Escapes NonThai => new Escapes(@"\P{IsThai}");
            public static Escapes NonLao => new Escapes(@"\P{IsLao}");
            public static Escapes NonTibetan => new Escapes(@"\P{IsTibetan}");
            public static Escapes NonMyanmar => new Escapes(@"\P{IsMyanmar}");
            public static Escapes NonGeorgian => new Escapes(@"\P{IsGeorgian}");
            public static Escapes NonHangulJamo => new Escapes(@"\P{IsHangulJamo}");
            public static Escapes NonEthiopic => new Escapes(@"\P{IsEthiopic}");
            public static Escapes NonCherokee => new Escapes(@"\P{IsCherokee}");
            public static Escapes NonUnifiedCanadianAboriginalSyllabics => new Escapes(@"\P{IsUnifiedCanadianAboriginalSyllabics}");
            public static Escapes NonOgham => new Escapes(@"\P{IsOgham}");
            public static Escapes NonRunic => new Escapes(@"\P{IsRunic}");
            public static Escapes NonTagalog => new Escapes(@"\P{IsTagalog}");
            public static Escapes NonHanunoo => new Escapes(@"\P{IsHanunoo}");
            public static Escapes NonBuhid => new Escapes(@"\P{IsBuhid}");
            public static Escapes NonTagbanwa => new Escapes(@"\P{IsTagbanwa}");
            public static Escapes NonKhmer => new Escapes(@"\P{IsKhmer}");
            public static Escapes NonMongolian => new Escapes(@"\P{IsMongolian}");
            public static Escapes NonLimbu => new Escapes(@"\P{IsLimbu}");
            public static Escapes NonTaiLe => new Escapes(@"\P{IsTaiLe}");
            public static Escapes NonKhmerSymbols => new Escapes(@"\P{IsKhmerSymbols}");
            public static Escapes NonPhoneticExtensions => new Escapes(@"\P{IsPhoneticExtensions}");
            public static Escapes NonLatinExtendedAdditional => new Escapes(@"\P{IsLatinExtendedAdditional}");
            public static Escapes NonGreekExtended => new Escapes(@"\P{IsGreekExtended}");
            public static Escapes NonGeneralPunctuation => new Escapes(@"\P{IsGeneralPunctuation}");
            public static Escapes NonSuperscriptsandSubscripts => new Escapes(@"\P{IsSuperscriptsandSubscripts}");
            public static Escapes NonCurrencySymbols => new Escapes(@"\P{IsCurrencySymbols}");
            public static Escapes NonCombiningDiacriticalMarksforSymbols => new Escapes(@"\P{IsCombiningDiacriticalMarksforSymbols}");
            public static Escapes NonCombiningMarksforSymbols => new Escapes(@"\P{IsCombiningMarksforSymbols}");
            public static Escapes NonLetterlikeSymbols => new Escapes(@"\P{IsLetterlikeSymbols}");
            public static Escapes NonNumberForms => new Escapes(@"\P{IsNumberForms}");
            public static Escapes NonArrows => new Escapes(@"\P{IsArrows}");
            public static Escapes NonMathematicalOperators => new Escapes(@"\P{IsMathematicalOperators}");
            public static Escapes NonMiscellaneousTechnical => new Escapes(@"\P{IsMiscellaneousTechnical}");
            public static Escapes NonControlPictures => new Escapes(@"\P{IsControlPictures}");
            public static Escapes NonOpticalCharacterRecognition => new Escapes(@"\P{IsOpticalCharacterRecognition}");
            public static Escapes NonEnclosedAlphanumerics => new Escapes(@"\P{IsEnclosedAlphanumerics}");
            public static Escapes NonBoxDrawing => new Escapes(@"\P{IsBoxDrawing}");
            public static Escapes NonBlockElements => new Escapes(@"\P{IsBlockElements}");
            public static Escapes NonGeometricShapes => new Escapes(@"\P{IsGeometricShapes}");
            public static Escapes NonMiscellaneousSymbols => new Escapes(@"\P{IsMiscellaneousSymbols}");
            public static Escapes NonDingbats => new Escapes(@"\P{IsDingbats}");
            public static Escapes NonMiscellaneousMathematicalSymbols_A => new Escapes(@"\P{IsMiscellaneousMathematicalSymbols-A}");
            public static Escapes NonSupplementalArrows_A => new Escapes(@"\P{IsSupplementalArrows-A}");
            public static Escapes NonBraillePatterns => new Escapes(@"\P{IsBraillePatterns}");
            public static Escapes NonSupplementalArrows_B => new Escapes(@"\P{IsSupplementalArrows-B}");
            public static Escapes NonMiscellaneousMathematicalSymbols_B => new Escapes(@"\P{IsMiscellaneousMathematicalSymbols-B}");
            public static Escapes NonSupplementalMathematicalOperators => new Escapes(@"\P{IsSupplementalMathematicalOperators}");
            public static Escapes NonMiscellaneousSymbolsandArrows => new Escapes(@"\P{IsMiscellaneousSymbolsandArrows}");
            public static Escapes NonCJKRadicalsSupplement => new Escapes(@"\P{IsCJKRadicalsSupplement}");
            public static Escapes NonKangxiRadicals => new Escapes(@"\P{IsKangxiRadicals}");
            public static Escapes NonIdeographicDescriptionCharacters => new Escapes(@"\P{IsIdeographicDescriptionCharacters}");
            public static Escapes NonCJKSymbolsandPunctuation => new Escapes(@"\P{IsCJKSymbolsandPunctuation}");
            public static Escapes NonHiragana => new Escapes(@"\P{IsHiragana}");
            public static Escapes NonKatakana => new Escapes(@"\P{IsKatakana}");
            public static Escapes NonBopomofo => new Escapes(@"\P{IsBopomofo}");
            public static Escapes NonHangulCompatibilityJamo => new Escapes(@"\P{IsHangulCompatibilityJamo}");
            public static Escapes NonKanbun => new Escapes(@"\P{IsKanbun}");
            public static Escapes NonBopomofoExtended => new Escapes(@"\P{IsBopomofoExtended}");
            public static Escapes NonKatakanaPhoneticExtensions => new Escapes(@"\P{IsKatakanaPhoneticExtensions}");
            public static Escapes NonEnclosedCJKLettersandMonths => new Escapes(@"\P{IsEnclosedCJKLettersandMonths}");
            public static Escapes NonCJKCompatibility => new Escapes(@"\P{IsCJKCompatibility}");
            public static Escapes NonCJKUnifiedIdeographsExtensionA => new Escapes(@"\P{IsCJKUnifiedIdeographsExtensionA}");
            public static Escapes NonYijingHexagramSymbols => new Escapes(@"\P{IsYijingHexagramSymbols}");
            public static Escapes NonCJKUnifiedIdeographs => new Escapes(@"\P{IsCJKUnifiedIdeographs}");
            public static Escapes NonYiSyllables => new Escapes(@"\P{IsYiSyllables}");
            public static Escapes NonYiRadicals => new Escapes(@"\P{IsYiRadicals}");
            public static Escapes NonHangulSyllables => new Escapes(@"\P{IsHangulSyllables}");
            public static Escapes NonHighSurrogates => new Escapes(@"\P{IsHighSurrogates}");
            public static Escapes NonHighPrivateUseSurrogates => new Escapes(@"\P{IsHighPrivateUseSurrogates}");
            public static Escapes NonLowSurrogates => new Escapes(@"\P{IsLowSurrogates}");
            public static Escapes NonPrivateUseArea => new Escapes(@"\P{IsPrivateUseArea}");
            public static Escapes NonCJKCompatibilityIdeographs => new Escapes(@"\P{IsCJKCompatibilityIdeographs}");
            public static Escapes NonLettericPresentationForms => new Escapes(@"\P{IsLettericPresentationForms}");
            public static Escapes NonArabicPresentationForms_A => new Escapes(@"\P{IsArabicPresentationForms-A}");
            public static Escapes NonVariationSelectors => new Escapes(@"\P{IsVariationSelectors}");
            public static Escapes NonCombiningHalfMarks => new Escapes(@"\P{IsCombiningHalfMarks}");
            public static Escapes NonCJKCompatibilityForms => new Escapes(@"\P{IsCJKCompatibilityForms}");
            public static Escapes NonSmallFormVariants => new Escapes(@"\P{IsSmallFormVariants}");
            public static Escapes NonArabicPresentationForms_B => new Escapes(@"\P{IsArabicPresentationForms-B}");
            public static Escapes NonHalfwidthandFullwidthForms => new Escapes(@"\P{IsHalfwidthandFullwidthForms}");
            public static Escapes NonSpecials => new Escapes(@"\P{IsSpecials}");

        }
    }
}